#import library
! pip install pyMetaheuristic
! pip install tqdm
! pip install PyPortfolioOpt
! pip install solution

#import data saham Lq45
from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
# df = pd.read_csv('drive/MyDrive/Colab Notebooks/lq45_join.csv')
df = pd.read_csv('drive/MyDrive/Crawling/lq45_join.csv')
from google.colab import drive
drive.mount('/content/drive')

#Data Preparation
company = list(dict.fromkeys(df['company'].tolist()))
company.sort()

diff = list()
day = list()
rate = list()
for i in range(len(company)):
  df_1 = df[df['company']==company[i]]
  for j in range(len(df_1)):
    day.append(j)
    if(j==0):
      diff.append(0)
      rate.append(0)
    else:
      diff.append(df_1.Close.iloc[j]-df_1.Close.iloc[j-1])
      rate.append((df_1.Close.iloc[j]-df_1.Close.iloc[j-1])/df_1.Close.iloc[j])
  # close = df_1['Close'].tolist()
  
  column_name = company[0]
df[df['company']== column_name]['Date'].tolist()

#Data diubah atau digrupkan berdasarkan tanggal
date_list = df.groupby('Date').count().reset_index().Date.to_list()
date_list

#Data diubah sesuai jenis saham
from tqdm import tqdm
dlist = list()
for i in range(len(date_list)):
  d = dict()
  d['Date'] = date_list[i]
  print(date_list[i])
  for j in tqdm(range(len(company))):
    try:
      d[company[j]] = df[(df['Date']==date_list[i]) & (df['company']==company[j])].Close.iloc[0]
    except:
      d[company[j]] = None
  dlist.append(d)
  # df[(df['Date']==date_list[0]) & (df['company']==company[0])].Close[0]
  
  #Proses Mean Variance Optimization
  df_2 = pd.read_csv('drive/MyDrive/Crawling/lq_45_h.csv')
  new_df_2 = df_2.loc[1364:].reset_index(drop=True).copy()
new_df_2 = new_df_2[:-1]
new_df_2 = new_df_2.set_index('Date')

#mengambil data sebagai data test
test = ['ADRO','ARTO','MEDC','GOTO','BBCA']
new_df_2[test]

#Hitung covarians
from pypfopt.expected_returns import mean_historical_return
from pypfopt.risk_models import CovarianceShrinkage


mu = mean_historical_return(new_df_2[test])
S = CovarianceShrinkage(new_df_2[test]).ledoit_wolf()

#menghitung efficient dan weight saham
from pypfopt.efficient_frontier import EfficientFrontier

ef = EfficientFrontier(mu, S)
weights = ef.max_sharpe()

cleaned_weights = ef.clean_weights()
print(dict(cleaned_weights))
weights

#menghitung performance portofolio
ef.portfolio_performance(verbose=True)

#menghitung alokasi 
from pypfopt.discrete_allocation import DiscreteAllocation, get_latest_prices

latest_prices = get_latest_prices(new_df_2)

da = DiscreteAllocation(weights, latest_prices, total_portfolio_value=500000000)

allocation, leftover = da.greedy_portfolio()
print("Discrete allocation:", allocation)
print("Funds remaining: Rp{:.2f}".format(leftover))



