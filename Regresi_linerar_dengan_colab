import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from sklearn import preprocessing
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error,mean_squared_log_error, r2_score
#upload data
import pandas as pd
from google.colab import files
uploaded= files.upload()
#membaca data
data=pd.read_excel('AKTUARIA.xlsx')
#hasil proses running data yang digunakan
data
#memanggil 5 data teratas
dataku=pd.DataFrame(data)
dataku.head()
#membersihkan data
data.isnull().sum()
#menentukan variabel x dan y
x=data.drop(columns='Nilai Matematika (Y)')
y=data['Nilai Matematika (Y)']
#menyiapkan data training dan data test
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test =train_test_split(x,y, test_size=0.2, random_state=0
#korelasi antara data
data.corr().style.set_precision(3)
#regresi linear
from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(X_train, y_train)
#mencari nilai intercent (nilai konstanta)
print(regressor.intercept_)
#menampilkan info data
data.info()
#menampilkan deskripsi data
data.describe()
#mencari nilai koefisien dan menampilkan hasilnya
feature_cols=['usia (X1)','Tinggi Badan (X2)','Berat Badan (X3)','Games1 (X4)', 'Games2 (X5)', 'Waktu_Sosmed (X6)']
X=data[feature_cols]
y=data['Nilai Matematika (Y)']
list(zip(feature_cols, regressor.coef_))
#mencari nilai untuk evaluasi linear regresi
y_pred=regressor.predict(X_test)
print("coefficient of determination : ",r2_score(y_test,y_pred))
print("MSE : ",mean_squared_error(y_test,y_pred))
print("RMSE : ",np.sqrt(mean_squared_error(y_test,y_pred)))
#menampilkan data y asli dan y prediksi
data_best_predict = pd.DataFrame ({'Actual': y_test, 'predicted' : y_pred})
data_best_predict.head(10)
#plot actual vs predicted value
plt.figure(figsize=(10,7))
plt.title("Actual vs. predicted",fontsize=25)
plt.xlabel("Actual",fontsize=18)
plt.ylabel("predicted", fontsize=18)
#plt.scatter (x=test_y,y=test_pred)
sns.regplot(x=y_test, y=y_pred)
plt.show()
#menampilkan hasil regresi
import statsmodels.api as sm
x=X_train.to_numpy()
y=y_train.to_numpy()
x=sm.add_constant(x)
model=sm.OLS(y,x).fit();
print(model.summary())
